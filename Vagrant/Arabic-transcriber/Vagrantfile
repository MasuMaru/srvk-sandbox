# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure(2) do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  config.vm.box = "http://speechkitchen.org/boxes/mario-kaldi.box"
  config.ssh.forward_x11 = true

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #

  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
config.vm.provider :virtualbox do |vb|
    vb.customize ["modifyvm", :id, '--audio', 'pulse', '--audiocontroller', 'ac97'] # choices: hda sb16 ac97
    vb.cpus = 2
    vb.memory = 4096 # 4 GB
end

  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "shell", inline: <<-SHELL
     sudo apt-get update -y

sudo apt-get install -y curl incron sox libsox-fmt-all libav-tools openjdk-6-jre 

     # Add user to audio group. Otherwise aplay -l finds no hardware(!)
     sudo usermod -a -G audio vagrant

# Vagrant user owns everything!
ln -fs /home/vagrant/kaldi-trunk /kaldi-trunk
chown vagrant:vagrant /kaldi-trunk

# get models
cd /kaldi-trunk/egs/
curl http://speechkitchen.org/vms/Data/gale_arabic_nnet.tgz | tar zx

# get kaldi-offline-transcriber
mkdir -p /home/vagrant/tools
cd /home/vagrant/tools
curl http://speechkitchen.org/vms/Data/kaldi-offline-transcriber.tgz | tar zx


# get XFCE, xterm
sudo apt-get install -y xfce4-panel xterm

# misc. startup files
#cd /home/vagrant
#tar zxvf /vagrant/vagranthome.tgz


# more misc. setup
mkdir -p /vagrant/transcribe-in
mkdir -p /vagrant/transcribe-out
rm -f /home/vagrant/tools/kaldi-offline-transcriber/result #other system
# our system
ln -s /vagrant/transcribe-out /home/vagrant/tools/kaldi-offline-transcriber/result

chown -R vagrant:vagrant /home/vagrant/

  SHELL

# set up incron
#
# this form allows us to deploy new vagrant home files
# to a machine that's already been provisioned, without 
# having to run a full 'vagrant provision' again; it will
# get picked up on each "vagrant up"
  config.vm.provision "incron", type: "shell", run: "always", inline: <<-SHELL
    cd /home/vagrant
    tar zxvf /vagrant/vagranthome.tgz
    chown -R vagrant:vagrant .
    cp vagrant.incron /var/spool/incron/vagrant
    chown vagrant:incron /var/spool/incron/vagrant
    chmod 600 /var/spool/incron/vagrant
    echo 'vagrant' >/etc/incron.allow
    chown root:incron /etc/incron.allow
    chmod 640 /etc/incron.allow
    SHELL
end
